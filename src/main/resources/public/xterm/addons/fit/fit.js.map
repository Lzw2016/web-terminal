{"version":3,"file":"fit.js","sources":["../../../src/addons/fit/fit.ts","../../../node_modules/_browser-pack@6.0.3@browser-pack/_prelude.js"],"sourcesContent":["/**\r\n * Copyright (c) 2014 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n *\r\n * Fit terminal columns and rows to the dimensions of its DOM element.\r\n *\r\n * ## Approach\r\n *\r\n *    Rows: Truncate the division of the terminal parent element height by the\r\n *          terminal row height.\r\n * Columns: Truncate the division of the terminal parent element width by the\r\n *          terminal character width (apply display: inline at the terminal\r\n *          row and truncate its width with the current number of columns).\r\n */\r\n\r\nexport function proposeGeometry(term) {\r\n  if (!term.element.parentElement) {\r\n    return null;\r\n  }\r\n  var parentElementStyle = window.getComputedStyle(term.element.parentElement);\r\n  var parentElementHeight = parseInt(parentElementStyle.getPropertyValue('height'));\r\n  var parentElementWidth = Math.max(0, parseInt(parentElementStyle.getPropertyValue('width')) - 17);\r\n  var elementStyle = window.getComputedStyle(term.element);\r\n  var elementPaddingVer = parseInt(elementStyle.getPropertyValue('padding-top')) + parseInt(elementStyle.getPropertyValue('padding-bottom'));\r\n  var elementPaddingHor = parseInt(elementStyle.getPropertyValue('padding-right')) + parseInt(elementStyle.getPropertyValue('padding-left'));\r\n  var availableHeight = parentElementHeight - elementPaddingVer;\r\n  var availableWidth = parentElementWidth - elementPaddingHor;\r\n  var geometry = {\r\n    cols: Math.floor(availableWidth / term.renderer.dimensions.actualCellWidth),\r\n    rows: Math.floor(availableHeight / term.renderer.dimensions.actualCellHeight)\r\n  };\r\n\r\n  return geometry;\r\n};\r\n\r\nexport function fit(term) {\r\n  var geometry = proposeGeometry(term);\r\n  if (geometry) {\r\n    // Force a full render\r\n    if (term.rows !== geometry.rows || term.cols !== geometry.cols) {\r\n      term.renderer.clear();\r\n      term.resize(geometry.cols, geometry.rows);\r\n    }\r\n  }\r\n};\r\n\r\nexport function apply(terminalConstructor) {\r\n  terminalConstructor.prototype.proposeGeometry = function() {\r\n    return proposeGeometry(this);\r\n  }\r\n\r\n  terminalConstructor.prototype.fit = function() {\r\n    return fit(this);\r\n  }\r\n}\r\n",null],"names":[],"mappings":"ACAA;;;ADeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAlBA;AAkBC;AAED;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AATA;AASC;AAED;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AARA;;;"}