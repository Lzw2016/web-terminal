{"version":3,"file":"attach.js","sources":["../../../src/addons/attach/attach.ts","../../../node_modules/_browser-pack@6.0.3@browser-pack/_prelude.js"],"sourcesContent":["/**\r\n * Copyright (c) 2014 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n *\r\n * Implements the attach method, that attaches the terminal to a WebSocket stream.\r\n */\r\n\r\n/**\r\n * Attaches the given terminal to the given socket.\r\n *\r\n * @param {Terminal} term - The terminal to be attached to the given socket.\r\n * @param {WebSocket} socket - The socket to attach the current terminal.\r\n * @param {boolean} bidirectional - Whether the terminal should send data\r\n *                                  to the socket as well.\r\n * @param {boolean} buffered - Whether the rendering of incoming data\r\n *                             should happen instantly or at a maximum\r\n *                             frequency of 1 rendering per 10ms.\r\n */\r\nexport function attach(term, socket, bidirectional, buffered) {\r\n  bidirectional = (typeof bidirectional == 'undefined') ? true : bidirectional;\r\n  term.socket = socket;\r\n\r\n  term._flushBuffer = function() {\r\n    term.write(term._attachSocketBuffer);\r\n    term._attachSocketBuffer = null;\r\n  };\r\n\r\n  term._pushToBuffer = function(data) {\r\n    if (term._attachSocketBuffer) {\r\n      term._attachSocketBuffer += data;\r\n    } else {\r\n      term._attachSocketBuffer = data;\r\n      setTimeout(term._flushBuffer, 10);\r\n    }\r\n  };\r\n\r\n  var myTextDecoder;\r\n\r\n  term._getMessage = function(ev) {\r\n    var str;\r\n    if (typeof ev.data === \"object\") {\r\n      if (ev.data instanceof ArrayBuffer) {\r\n          if (!myTextDecoder) {\r\n            myTextDecoder = new TextDecoder();\r\n          }\r\n\r\n          str = myTextDecoder.decode( ev.data );\r\n      }\r\n      else {\r\n        throw \"TODO: handle Blob?\";\r\n      }\r\n    }\r\n\r\n    if (buffered) {\r\n      term._pushToBuffer(str || ev.data);\r\n    } else {\r\n      term.write(str || ev.data);\r\n    }\r\n  };\r\n\r\n  term._sendData = function(data) {\r\n    if (socket.readyState !== 1) {\r\n      return;\r\n    }\r\n    socket.send(data);\r\n  };\r\n\r\n  socket.addEventListener('message', term._getMessage);\r\n\r\n  if (bidirectional) {\r\n    term.on('data', term._sendData);\r\n  }\r\n\r\n  socket.addEventListener('close', term.detach.bind(term, socket));\r\n  socket.addEventListener('error', term.detach.bind(term, socket));\r\n};\r\n\r\n/**\r\n * Detaches the given terminal from the given socket\r\n *\r\n * @param {Terminal} term - The terminal to be detached from the given socket.\r\n * @param {WebSocket} socket - The socket from which to detach the current\r\n *                             terminal.\r\n */\r\nexport function detach(term, socket) {\r\n  term.off('data', term._sendData);\r\n\r\n  socket = (typeof socket == 'undefined') ? term.socket : socket;\r\n\r\n  if (socket) {\r\n    socket.removeEventListener('message', term._getMessage);\r\n  }\r\n\r\n  delete term.socket;\r\n};\r\n\r\n\r\nexport function apply(terminalConstructor) {\r\n  /**\r\n   * Attaches the current terminal to the given socket\r\n   *\r\n   * @param {WebSocket} socket - The socket to attach the current terminal.\r\n   * @param {boolean} bidirectional - Whether the terminal should send data\r\n   *                                  to the socket as well.\r\n   * @param {boolean} buffered - Whether the rendering of incoming data\r\n   *                             should happen instantly or at a maximum\r\n   *                             frequency of 1 rendering per 10ms.\r\n   */\r\n  terminalConstructor.prototype.attach = function(socket, bidirectional, buffered) {\r\n    return attach(this, socket, bidirectional, buffered);\r\n  };\r\n\r\n  /**\r\n   * Detaches the current terminal from the given socket.\r\n   *\r\n   * @param {WebSocket} socket - The socket from which to detach the current\r\n   *                             terminal.\r\n   */\r\n  terminalConstructor.prototype.detach = function(socket) {\r\n    return detach(this, socket);\r\n  };\r\n}\r\n",null],"names":[],"mappings":"ACAA;;;ADkBA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAzDA;AAyDC;AASD;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAVA;AAUC;AAGD;AAWA;AACA;AACA;AAQA;AACA;AACA;AACA;AAxBA;;;"}