{"version":3,"file":"winptyCompat.js","sources":["../../../src/addons/winptyCompat/winptyCompat.ts","../../../node_modules/_browser-pack@6.0.3@browser-pack/_prelude.js"],"sourcesContent":["/**\r\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nexport function winptyCompatInit(terminal): void {\r\n    // Don't do anything when the platform is not Windows\r\n    const isWindows = ['Windows', 'Win16', 'Win32', 'WinCE'].indexOf(navigator.platform) >= 0;\r\n    if (!isWindows) {\r\n      return;\r\n    }\r\n\r\n    // Winpty does not support wraparound mode which means that lines will never\r\n    // be marked as wrapped. This causes issues for things like copying a line\r\n    // retaining the wrapped new line characters or if consumers are listening\r\n    // in on the data stream.\r\n    //\r\n    // The workaround for this is to listen to every incoming line feed and mark\r\n    // the line as wrapped if the last character in the previous line is not a\r\n    // space. This is certainly not without its problems, but generally on\r\n    // Windows when text reaches the end of the terminal it's likely going to be\r\n    // wrapped.\r\n    terminal.on('linefeed', () => {\r\n      const line = terminal.buffer.lines.get(terminal.buffer.ybase + terminal.buffer.y - 1);\r\n      const lastChar = line[terminal.cols - 1];\r\n\r\n      if (lastChar[3] !== 32 /* ' ' */) {\r\n        const nextLine = terminal.buffer.lines.get(terminal.buffer.ybase + terminal.buffer.y);\r\n        (<any>nextLine).isWrapped = true;\r\n      }\r\n    });\r\n}\r\n\r\nexport function apply(terminalConstructor) {\r\n  terminalConstructor.prototype.winptyCompatInit = function(): void {\r\n    winptyCompatInit(this);\r\n  };\r\n}\r\n",null],"names":[],"mappings":"ACAA;;;ADKA;AAEA;AACA;AACA;AACA;AAYA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AA1BA;AA4BA;AACA;AACA;AACA;AACA;AAJA;;;"}