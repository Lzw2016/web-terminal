{"version":3,"file":"search.js","sources":["../../../src/addons/search/search.ts","../../../src/addons/search/SearchHelper.ts","../../../node_modules/_browser-pack@6.0.3@browser-pack/_prelude.js"],"sourcesContent":["/**\r\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { SearchHelper } from './SearchHelper';\r\n\r\n\r\n/**\r\n * Find the next instance of the term, then scroll to and select it. If it\r\n * doesn't exist, do nothing.\r\n * @param term Tne search term.\r\n * @return Whether a result was found.\r\n */\r\nexport function findNext(terminal: any, term: string): boolean {\r\n  if (!terminal._searchHelper) {\r\n    terminal.searchHelper = new SearchHelper(terminal);\r\n  }\r\n  return (<SearchHelper>terminal.searchHelper).findNext(term);\r\n};\r\n\r\n/**\r\n * Find the previous instance of the term, then scroll to and select it. If it\r\n * doesn't exist, do nothing.\r\n * @param term Tne search term.\r\n * @return Whether a result was found.\r\n */\r\nexport function findPrevious(terminal: any, term: string): boolean {\r\n  if (!terminal._searchHelper) {\r\n    terminal.searchHelper = new SearchHelper(terminal);\r\n  }\r\n  return (<SearchHelper>terminal.searchHelper).findPrevious(term);\r\n};\r\n\r\nexport function apply(terminalConstructor) {\r\n  terminalConstructor.prototype.findNext = function(term) {\r\n    return findNext(this, term);\r\n  }\r\n\r\n  terminalConstructor.prototype.findPrevious = function(term) {\r\n    return findPrevious(this, term);\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\n// import { ITerminal } from '../../Interfaces';\r\n// import { translateBufferLineToString } from '../../utils/BufferLine';\r\n\r\ninterface ISearchResult {\r\n  term: string;\r\n  col: number;\r\n  row: number;\r\n}\r\n\r\n/**\r\n * A class that knows how to search the terminal and how to display the results.\r\n */\r\nexport class SearchHelper {\r\n  constructor(private _terminal: any) {\r\n    // TODO: Search for multiple instances on 1 line\r\n    // TODO: Don't use the actual selection, instead use a \"find selection\" so multiple instances can be highlighted\r\n    // TODO: Highlight other instances in the viewport\r\n    // TODO: Support regex, case sensitivity, etc.\r\n  }\r\n\r\n  /**\r\n   * Find the next instance of the term, then scroll to and select it. If it\r\n   * doesn't exist, do nothing.\r\n   * @param term Tne search term.\r\n   * @return Whether a result was found.\r\n   */\r\n  public findNext(term: string): boolean {\r\n    if (!term || term.length === 0) {\r\n      return false;\r\n    }\r\n\r\n    let result: ISearchResult;\r\n\r\n    let startRow = this._terminal.buffer.ydisp;\r\n    if (this._terminal.selectionManager.selectionEnd) {\r\n      // Start from the selection end if there is a selection\r\n      startRow = this._terminal.selectionManager.selectionEnd[1];\r\n    }\r\n\r\n    // Search from ydisp + 1 to end\r\n    for (let y = startRow + 1; y < this._terminal.buffer.ybase + this._terminal.rows; y++) {\r\n      result = this._findInLine(term, y);\r\n      if (result) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Search from the top to the current ydisp\r\n    if (!result) {\r\n      for (let y = 0; y < startRow; y++) {\r\n        result = this._findInLine(term, y);\r\n        if (result) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Set selection and scroll if a result was found\r\n    return this._selectResult(result);\r\n  }\r\n\r\n  /**\r\n   * Find the previous instance of the term, then scroll to and select it. If it\r\n   * doesn't exist, do nothing.\r\n   * @param term Tne search term.\r\n   * @return Whether a result was found.\r\n   */\r\n  public findPrevious(term: string): boolean {\r\n    if (!term || term.length === 0) {\r\n      return false;\r\n    }\r\n\r\n    let result: ISearchResult;\r\n\r\n    let startRow = this._terminal.buffer.ydisp;\r\n    if (this._terminal.selectionManager.selectionStart) {\r\n      // Start from the selection end if there is a selection\r\n      startRow = this._terminal.selectionManager.selectionStart[1];\r\n    }\r\n\r\n    // Search from ydisp + 1 to end\r\n    for (let y = startRow - 1; y >= 0; y--) {\r\n      result = this._findInLine(term, y);\r\n      if (result) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Search from the top to the current ydisp\r\n    if (!result) {\r\n      for (let y = this._terminal.buffer.ybase + this._terminal.rows - 1; y > startRow; y--) {\r\n        result = this._findInLine(term, y);\r\n        if (result) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Set selection and scroll if a result was found\r\n    return this._selectResult(result);\r\n  }\r\n\r\n  /**\r\n   * Searches a line for a search term.\r\n   * @param term Tne search term.\r\n   * @param y The line to search.\r\n   * @return The search result if it was found.\r\n   */\r\n  private _findInLine(term: string, y: number): ISearchResult {\r\n    const lowerStringLine = this._terminal.buffer.translateBufferLineToString(y, true).toLowerCase();\r\n    const lowerTerm = term.toLowerCase();\r\n    const searchIndex = lowerStringLine.indexOf(lowerTerm);\r\n    if (searchIndex >= 0) {\r\n      return {\r\n        term,\r\n        col: searchIndex,\r\n        row: y\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Selects and scrolls to a result.\r\n   * @param result The result to select.\r\n   * @return Whethera result was selected.\r\n   */\r\n  private _selectResult(result: ISearchResult): boolean {\r\n    if (!result) {\r\n      return false;\r\n    }\r\n    this._terminal.selectionManager.setSelection(result.col, result.row, result.term.length);\r\n    this._terminal.scrollLines(result.row - this._terminal.buffer.ydisp, false);\r\n    return true;\r\n  }\r\n}\r\n",null],"names":[],"mappings":"AEAA;;;ADiBA;AACA;AAAA;AAKA;AAQA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAQA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AA1Ha;;;;;;;ADZb;AASA;AACA;AACA;AACA;AACA;AACA;AALA;AAKC;AAQD;AACA;AACA;AACA;AACA;AACA;AALA;AAKC;AAED;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AARA;;;"}